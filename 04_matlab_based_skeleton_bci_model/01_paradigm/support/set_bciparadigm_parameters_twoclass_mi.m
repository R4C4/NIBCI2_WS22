function BCIpar = set_bciparadigm_parameters_twoclass_mi

global feedbackrun

%% Settings for:

%% i) paradigm timings (all timings are expressed in seconds)
BCIpar.times.time_pre_run   = 3;
BCIpar.times.time_pre_cue   = 2.5;
BCIpar.times.time_cue       = 2.5;
BCIpar.times.time_mi        = 5;
BCIpar.times.time_break_min = 2;
BCIpar.times.time_break_max = 3;
BCIpar.times.time_post_run  = 5;

%% ii) number of trials and class info (half of trials is class1, half of trials is class2, in randomised orded)

% number of trials
%BCIpar.nTrials = 20; % total number of trials (half will be class 1, half class 2)
BCIpar.nTrials = 120;

% class info
class1_label = 'hand';
class2_label = 'foot';

% create class cues
class1_cues = 1 * ones(ceil(BCIpar.nTrials/2), 1);
class2_cues = 2 * ones(ceil(BCIpar.nTrials/2), 1);
class_list = cat(1, class1_cues, class2_cues);
class_list = class_list(randperm(length(class_list)));

% "store" everything in the BCIpar structure
BCIpar.cues.class_list = class_list;
BCIpar.cues.class_labels{1} = class1_label;
BCIpar.cues.class_labels{2} = class2_label;

%% iii) settings for the paradigm figure

% size, color, and position of elements in the figure
BCIpar.sfDisplay.crossSize = 0.30;
BCIpar.sfDisplay.crossColor = 'r';
BCIpar.sfDisplay.lineWidth = 5;

% If present display the window on the second screen
monitor_positions = get(groot, 'MonitorPositions');
if size(monitor_positions, 1) == 2
    BCIpar.sfDisplay.screensize = monitor_positions(2,:);
else
    BCIpar.sfDisplay.screensize = monitor_positions(1,:);
end

aspect_ratio_heigth_over_width = BCIpar.sfDisplay.screensize(3)/...
    BCIpar.sfDisplay.screensize(4);

BCIpar.sfDisplay.hfig = figure('Color', 'none',...
    'Position', BCIpar.sfDisplay.screensize,...
    'MenuBar', 'none',...
    'ToolBar', 'none',...
    'Units', 'pixels', ....
    'Visible', 'off');

BCIpar.sfDisplay.hMainAxes = axes('Color', 'none',...
    'xlim', [-1.1 1.1],...
    'ylim', [-1.1 1.1],...
    'Visible', 'off',...
    'XAxisLocation', 'origin',...
    'YAxisLocation', 'origin',...
    'Position', [0, 0, 1, 1]);

% Fixation Cross
BCIpar.sfDisplay.hCross_horizontal = ...
    line(BCIpar.sfDisplay.crossSize*[-1 1], ...
    [0, 0],'Color', BCIpar.sfDisplay.crossColor,...
    'LineWidth', BCIpar.sfDisplay.lineWidth,...
    'Visible', 'off');

BCIpar.sfDisplay.hCross_vertical = line([0, 0], ...
    BCIpar.sfDisplay.crossSize*[-1 1]*aspect_ratio_heigth_over_width,...
    'Color', BCIpar.sfDisplay.crossColor,...
    'LineWidth', BCIpar.sfDisplay.lineWidth,...
    'Visible', 'off');

% Make sure we are in the directory of the running function
runningdir = fileparts(mfilename('fullpath'));
cd(runningdir)

% 
% Include pictures:
%%% Class 1 Start
[BCIpar.sfDisplay.class1_start, ~, BCIpar.sfDisplay.class1_alpha] = ...
    imread('pics/hand_squeezing.png'); 
%%% Class 1 Start, correct classified
[BCIpar.sfDisplay.class1_correct, ~, BCIpar.sfDisplay.class1_alpha] = ...
    imread('pics/hand_squeezing_TRUE.png'); 
%%% Class 1 Start, wrong classified
[BCIpar.sfDisplay.class1_wrong, ~, BCIpar.sfDisplay.class1_alpha] = ...
    imread('pics/hand_squeezing_FALSE.png'); 
% %%% Class 2 Start
[BCIpar.sfDisplay.class2_start, ~ , BCIpar.sfDisplay.class2_alpha] = ...
    imread('pics/foot_stretch.png');
%%% Class 2, correct classified
[BCIpar.sfDisplay.class2_correct, ~ , BCIpar.sfDisplay.class2_alpha] = ...
    imread('pics/foot_stretch_TRUE.png');
%%% Class 2, wrong classified
[BCIpar.sfDisplay.class2_wrong, ~ , BCIpar.sfDisplay.class2_alpha] = ...
    imread('pics/foot_stretch_FALSE.png');


position_up = [0.45 0.72 0.1 0.1*aspect_ratio_heigth_over_width];
position_small = [-0.1 0.1];

%%% Class 1 start
BCIpar.sfDisplay.haxes_class1_start = axes(...
     'Color', 'none',...
     'Visible', 'off',...
     'YDir', 'reverse', ...
     'Position', position_up);
 
BCIpar.sfDisplay.himage_class1_start = image('CData', ...
     BCIpar.sfDisplay.class1_start,...
     'AlphaData', BCIpar.sfDisplay.class1_alpha,...
     'XData', position_small, ...
     'YData', position_small, ...
     'Visible','off');

BCIpar.sfDisplay.haxes_class2_start = axes(...
    'Color', 'none',...
    'Visible', 'off',...
    'YDir', 'reverse', ...
    'Position', position_up);

BCIpar.sfDisplay.himage_class2_start = image('CData', ...
    BCIpar.sfDisplay.class2_start,...
    'AlphaData', BCIpar.sfDisplay.class2_alpha,...
    'XData', position_small, ...
    'YData', position_small, ...
    'Visible','off');

position_center = [0.3 0.149 0.4 0.4*aspect_ratio_heigth_over_width];

%%% Class 1 Execute
BCIpar.sfDisplay.haxes_class1_execute = axes(...
    'Color', 'none',...
    'Visible', 'off',...
    'YDir', 'reverse', ...
    'Position', position_center);
BCIpar.sfDisplay.himage_class1_execute = image('CData', ...
    BCIpar.sfDisplay.class1_start,...
    'Visible','off',...
    'AlphaData', BCIpar.sfDisplay.class1_alpha, ...
    'XData',position_small,...
    'YData',position_small);


%%% Class 2 Execute
BCIpar.sfDisplay.haxes_class2_execute = axes(...
    'Color', 'none',...
    'YDir', 'reverse', ...
    'Visible', 'off',...
    'Position', position_center);

BCIpar.sfDisplay.himage_class2_execute = image('CData', ...
    BCIpar.sfDisplay.class2_start,...
    'Visible','off',...
    'AlphaData', BCIpar.sfDisplay.class2_alpha, ...
    'XData',position_small, ...
    'YData',position_small);

if feedbackrun

%%% Class 2 Correct
BCIpar.sfDisplay.haxes_class2_correct = axes(...
    'Color', 'none',...
    'YDir', 'reverse', ...
    'Visible', 'off',...
    'Position', position_center);

BCIpar.sfDisplay.himage_class2_correct = image('CData', ...
    BCIpar.sfDisplay.class2_correct,...
    'Visible','off',...
    'AlphaData', BCIpar.sfDisplay.class2_alpha, ...
    'XData',position_small, ...
    'YData',position_small);
%%% Class 2 Wrong
BCIpar.sfDisplay.haxes_class2_wrong = axes(...
    'Color', 'none',...
    'YDir', 'reverse', ...
    'Visible', 'off',...
    'Position', position_center);

BCIpar.sfDisplay.himage_class2_wrong = image('CData', ...
    BCIpar.sfDisplay.class2_wrong,...
    'Visible','off',...
    'AlphaData', BCIpar.sfDisplay.class2_alpha, ...
    'XData',position_small, ...
    'YData',position_small);
    
%%% Class 1 Correct
BCIpar.sfDisplay.haxes_class1_correct = axes(...
    'Color', 'none',...
    'Visible', 'off',...
    'YDir', 'reverse', ...
    'Position', position_center);
BCIpar.sfDisplay.himage_class1_correct = image('CData', ...
    BCIpar.sfDisplay.class1_correct,...
    'Visible','off',...
    'AlphaData', BCIpar.sfDisplay.class1_alpha, ...
    'XData',position_small,...
    'YData',position_small);

%%% Class 1 Wrong
BCIpar.sfDisplay.haxes_class1_wrong = axes(...
    'Color', 'none',...
    'Visible', 'off',...
    'YDir', 'reverse', ...
    'Position', position_center);
BCIpar.sfDisplay.himage_class1_correct = image('CData', ...
    BCIpar.sfDisplay.class1_wrong,...
    'Visible','off',...
    'AlphaData', BCIpar.sfDisplay.class1_alpha, ...
    'XData',position_small,...
    'YData',position_small);

end

end