function BCIpar = set_bciparadigm_parameters

global feedbackrun

%% Settings for:

%% i) paradigm timings (all timings are expressed in seconds)
BCIpar.times.time_pre_run   = 3;
BCIpar.times.time_pre_cue   = 2.5;
BCIpar.times.time_cue       = 1.5;
BCIpar.times.time_mi        = 5;
BCIpar.times.time_break_min = 2;
BCIpar.times.time_break_max = 3;
BCIpar.times.time_post_run  = 5;

%% ii) number of trials and class info (half of trials is class1, half of trials is class2, in randomised orded)

% number of trials
BCIpar.nTrials = 20; % total number of trials (half will be class 1, half class 2)

% class info
class1_label = 'hand';
class2_label = 'foot';

% create class cues
class1_cues = 1 * ones(ceil(BCIpar.nTrials/2), 1);
class2_cues = 2 * ones(ceil(BCIpar.nTrials/2), 1);
class_list = cat(1, class1_cues, class2_cues);
class_list = class_list(randperm(length(class_list)));

% "store" everything in the BCIpar structure
BCIpar.cues.class_list = class_list;
BCIpar.cues.class_labels{1} = class1_label;
BCIpar.cues.class_labels{2} = class2_label;

%% iii) settings for the paradigm figure

% size, color, and position of elements in the figure
BCIpar.sfDisplay.crossSize = 0.18;
BCIpar.sfDisplay.crossColor = 'k';
BCIpar.sfDisplay.lineWidth = 5;

% If present display the window on the second screen
monitor_positions = get(groot, 'MonitorPositions');
if size(monitor_positions, 1) == 2
    BCIpar.sfDisplay.screensize = monitor_positions(2,:);
else
    BCIpar.sfDisplay.screensize = monitor_positions(1,:);
end

aspect_ratio_heigth_over_width = BCIpar.sfDisplay.screensize(3)/BCIpar.sfDisplay.screensize(4);

BCIpar.sfDisplay.hfig = figure('Color', [0.5 0.5 0.5],...
    'position', BCIpar.sfDisplay.screensize,...
    'MenuBar', 'none',...
    'ToolBar', 'none',...
    'Visible', 'off');

BCIpar.sfDisplay.hMainAxes = axes('Color', 'none',...
    'xlim', [-1.1 1.1],...
    'ylim', [-1.1 1.1],...
    'Visible', 'off',...
    'Position', [0, 0, 1, 1]);

BCIpar.sfDisplay.hCross_horizontal = line(BCIpar.sfDisplay.crossSize*[-1 1], [0, 0],...
    'Color', BCIpar.sfDisplay.crossColor,...
    'LineWidth', BCIpar.sfDisplay.lineWidth,...
    'Visible', 'off');

BCIpar.sfDisplay.hCross_vertical = line([0, 0], BCIpar.sfDisplay.crossSize*[-1 1]*aspect_ratio_heigth_over_width,...
    'Color', BCIpar.sfDisplay.crossColor,...
    'LineWidth', BCIpar.sfDisplay.lineWidth,...
    'Visible', 'off');

% Make sure we are in the directory of the running function
runningdir = fileparts(mfilename('fullpath'));
cd(runningdir)

% Include pictures:
BCIpar.sfDisplay.class1_start = imread(['pics/hand_start', '.png']);
BCIpar.sfDisplay.haxes_class1_start = axes(...
    'Color', 'none',...
    'xlim', [-1/2 1/2],...
    'ylim', [-1/2 1/2],...
    'Visible', 'off',...
    'Position', [0, 0, 1, 1.5],...
    'YDir', 'reverse');
BCIpar.sfDisplay.himage_class1_start = image('CData', BCIpar.sfDisplay.class1_start,...
    'Visible','off',...
    'XData',[-0.05 0.05],...
    'YData',[-0.05 0.05]);

BCIpar.sfDisplay.class1_execute = imread(['pics/hand_execute', '.png']);
BCIpar.sfDisplay.haxes_class1_execute = axes(...
    'Color', 'none',...
    'xlim', [-1/2 1/2],...
    'ylim', [-1/2 1/2],...
    'Visible', 'off',...
    'Position', [0, 0, 1, 1.5],...
    'YDir', 'reverse');
BCIpar.sfDisplay.himage_class1_execute = image('CData', BCIpar.sfDisplay.class1_execute,...
    'Visible','off',...
    'XData',[-0.05 0.05],...
    'YData',[-0.05 0.05]);

BCIpar.sfDisplay.class2_start = imread(['pics/foot_start', '.png']);
BCIpar.sfDisplay.haxes_class2_start = axes(...
    'Color', 'none',...
    'xlim', [-1/2 1/2],...
    'ylim', [-1/2 1/2],...
    'Visible', 'off',...
    'Position', [0, 0, 1, 1.5],...
    'YDir', 'reverse');
BCIpar.sfDisplay.himage_class2_start = image('CData', BCIpar.sfDisplay.class2_start ,...
    'Visible','off',...
    'XData',[-0.05 0.05],...
    'YData',[-0.05 0.05]);

BCIpar.sfDisplay.class2_execute = imread(['pics/foot_execute', '.png']);
BCIpar.sfDisplay.haxes_class2_execute = axes(...
    'Color', 'none',...
    'xlim', [-1/2 1/2],...
    'ylim', [-1/2 1/2],...
    'Visible', 'off',...
    'Position', [0, 0, 1, 1.5],...
    'YDir', 'reverse');
BCIpar.sfDisplay.himage_class2_execute = image('CData', BCIpar.sfDisplay.class2_execute ,...
    'Visible','off',...
    'XData',[-0.05 0.05],...
    'YData',[-0.05 0.05]);

if feedbackrun

    r = 0.55;
    BCIpar.sfDisplay.lineWidth = 2;
    
    theta_feedback_circle = [0:3:360]*pi/180;
    r_feedback_circle = r*ones(1,length(theta_feedback_circle));
    p = polaraxes; set(p, 'Position',[0 0 1 1])
    set(p, 'Visible','off');
    BCIpar.sfDisplay.feedback_circle = line(p, theta_feedback_circle, r_feedback_circle, 'LineWidth', 3*BCIpar.sfDisplay.lineWidth);
    BCIpar.sfDisplay.feedback_circle_default_rdata = r_feedback_circle;
    set(BCIpar.sfDisplay.feedback_circle, 'Visible', 'off');
    
%     % noting down useful commands to control the circle behaviour
%     set(BCIpar.sfDisplay.feedback_circle, 'Visible', 'off');  % set visibility off
%     set(BCIpar.sfDisplay.feedback_circle, 'Visible', 'on'); % set visibility on
%     set(BCIpar.sfDisplay.feedback_circle, 'Color', 'g'); % set color to green
%     set(BCIpar.sfDisplay.feedback_circle, 'Color', 'r'); % set color to red
%     set(BCIpar.sfDisplay.feedback_circle, 'RData', BCIpar.sfDisplay.feedback_circle_default_rdata); % restore circle radius to default
%     G = 1.5; set(BCIpar.sfDisplay.feedback_circle, 'RData', 1.5*BCIpar.sfDisplay.feedback_circle_default_rdata);
    
end

end